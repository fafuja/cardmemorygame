{"version":3,"sources":["shuffle.js","Card.js","GameBoard.js","GameStatus.js","Pages.js","App.js","index.js"],"names":["shuffle","arr","currentValue","randomIndex","randomValue","t","i","length","Math","floor","random","pair","counter","Card","icons","faCarrot","faBomb","faBowlingBall","faCarSide","faAppleAlt","faBaseballBall","faBell","faBicycle","icon_pairs","this","props","pairs","push","onClick","event","e","canFlip","target","children","className","id","card","dataset","onCounterUpdate","splice","setTimeout","onTimeUpdate","temp","document","querySelector","onFailsUpdate","cardClicked","cardId","data-card","cardKey","icon","faQuestionCircle","React","Component","GameBoard","index","rows","map","r","Row","key","cols","c","Col","shuffleArray","GameStatus","message","HomePage","cards","nPairs","timeOver","Event","useState","game","setGame","seconds","setSeconds","fails","setFails","setCounter","setShuffleArray","reloadGame","setReloadGame","startGame","style","cursor","statusContent","setStatusContent","canReload","useRef","updateStatus","msg","useEffect","current","getElementById","display","addEventListener","getElementsByClassName","opacity","dispatchEvent","timeinterval","setInterval","s","clearInterval","Container","faClock","float","faRedo","textAlign","faCheck","faTimes","f","n","App","basename","exact","path","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.21e46f41.chunk.js","sourcesContent":["export default function shuffle(arr){\r\n    var t = arr;\r\n    var currentValue, randomIndex, randomValue;\r\n    for (var i=0; i < t.length;i++){\r\n        \r\n        currentValue = t[i];\r\n        randomIndex = Math.floor(Math.random() * t.length);\r\n        randomValue = t[randomIndex];\r\n        t[i] = randomValue;\r\n        t[randomIndex] = currentValue;\r\n        \r\n    }\r\n    \r\n    return t;\r\n}","import React from 'react';\r\nimport { faQuestionCircle } from '@fortawesome/free-regular-svg-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport { faCarrot, faBomb, faBowlingBall, faCarSide, faAppleAlt, faBaseballBall, faBell, faBicycle } from '@fortawesome/free-solid-svg-icons';\r\nimport './css.css'\r\n\r\nvar pair = [];\r\n\r\nvar counter = 0;\r\n\r\nclass Card extends React.Component{\r\n    render() {\r\n        \r\n        const icons = [\r\n            faCarrot,\r\n            faBomb,\r\n            faBowlingBall,\r\n            faCarSide,\r\n            faAppleAlt,\r\n            faBaseballBall,\r\n            faBell,\r\n            faBicycle\r\n        ]\r\n        let icon_pairs = [];\r\n        for (let i=0; i<(this.props.pairs);i++){\r\n            icon_pairs.push(icons[i]);\r\n        }\r\n\r\n        const cardClicked = (e)=>{\r\n            \r\n            if(this.props.canFlip === true){\r\n                if(e.target.children[0].className === \"card\"){\r\n                    e.target.children[0].className = \"card is-flipped\";\r\n                    \r\n                    if(pair.length < 2){\r\n                      pair.push({id: e.target.children[0].id, card: e.target.children[0].dataset.card})   \r\n                    }\r\n                    if(pair.length === 2 && pair[0].id === pair[1].id){\r\n                        this.props.onCounterUpdate();\r\n                        pair.splice(0,2);\r\n                        counter++;\r\n                        if(counter === this.props.pairs){\r\n                            counter = 0;\r\n                            setTimeout(()=>{\r\n                                this.props.onTimeUpdate();\r\n                            }, 300)\r\n                        }\r\n                    }else if(pair.length === 2 && pair[0].id !== pair[1].id){\r\n                        var temp = [pair[0].card, pair[1].card]; \r\n                        pair.splice(0,2);\r\n                        setTimeout(()=>{\r\n                            document.querySelector(\"div[data-card='\"+temp[0]+\"']\").className = \"card\";\r\n                            document.querySelector(\"div[data-card='\"+temp[1]+\"']\").className = \"card\";\r\n                        }, 800);\r\n                        this.props.onFailsUpdate();\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n\r\n        return(\r\n            <div onClick={(event)=>{cardClicked(event)}} className='carddiv'><div className='card' id={this.props.cardId} data-card={this.props.cardKey} ><div className='card-face front'><span  className='cardicon'><FontAwesomeIcon icon={faQuestionCircle} /></span></div><div className='card-face back'><span className='cardicon'><FontAwesomeIcon icon={icon_pairs[this.props.cardId]} /></span></div></div></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport { Card, pair };","import React from 'react';\r\nimport {Card} from './Card';\r\nimport { Col, Row } from 'react-bootstrap';\r\n\r\nexport default class GameBoard extends React.Component{\r\n    render(){\r\n        let index = 0;\r\n        return(\r\n            <div className='gameboard'>  \r\n                {\r\n                this.props.rows.map(\r\n                    (r)=>{\r\n                    return(\r\n                        <Row key={r}>\r\n                        {\r\n                            this.props.cols.map(\r\n                            (c)=>{\r\n                                    return(\r\n                                        <Col key={c}><Card onTimeUpdate={this.props.onTimeUpdate} onFailsUpdate={this.props.onFailsUpdate} onCounterUpdate={this.props.onCounterUpdate} canFlip={this.props.canFlip} pairs={this.props.pairs} cardKey={index} cardId={this.props.shuffleArray[index++]}/></Col>\r\n                                    )\r\n                                }\r\n                            )\r\n                        }\r\n                        </Row>)\r\n                    }\r\n                )\r\n                }\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\n\r\nexport default class GameStatus extends Component{\r\n    render() {\r\n\r\n        return(\r\n        <span id='messageStatus'>{this.props.message}</span>\r\n        )\r\n    }\r\n}","import React, {useState, useEffect, useRef} from 'react';\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './css.css';\r\nimport { faClock } from '@fortawesome/free-regular-svg-icons';\r\nimport { faCheck, faTimes, faRedo } from '@fortawesome/free-solid-svg-icons';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport shuffle from './shuffle.js';\r\nimport GameBoard from './GameBoard';\r\nimport GameStatus from './GameStatus';\r\nimport { pair } from './Card';\r\n\r\nconst HomePage = (props) => {\r\n    \r\n    let time = 120; /* seconds */\r\n    let nPairs = 8; \r\n\r\n    /*------------------*/\r\n    let cards = []\r\n    for (let i = 0; i < nPairs*2; i++) {\r\n      if(cards.length === (nPairs*2)){\r\n        break;\r\n      }else{\r\n        if (i === nPairs && nPairs !== 1){\r\n          i = 0;\r\n        }\r\n      }\r\n      cards.push(i);\r\n    }\r\n    /*------------------*/\r\n    let constCol = ((nPairs/2)/2)*2;\r\n    let rows = [];\r\n    let cols = [];\r\n\r\n    for (let i=0; i<nPairs/2;i++){\r\n      rows.push(i);\r\n    } \r\n    for (let i=0; i<(nPairs/2)*(4/constCol);i++){\r\n      cols.push(i);\r\n    }\r\n    /*-------------------*/\r\n    const timeOver = new Event('timeover');\r\n\r\n    const [game, setGame] = useState(false);\r\n    const [seconds, setSeconds] = useState(()=>time);\r\n    const [fails, setFails] = useState(0);\r\n    const [counter, setCounter] = useState(0);\r\n    const [shuffleArray, setShuffleArray] = useState(()=>shuffle(cards));\r\n    const [reloadGame, setReloadGame] = useState(()=>false);\r\n    const [statusContent, setStatusContent] = useState(<span onClick={()=>{startGame()}} style={{cursor: 'pointer'}}>Play</span>);\r\n\r\n    const canReload = useRef(false);\r\n\r\n    const onTimeUpdate = ()=>{\r\n      document.dispatchEvent(timeOver);\r\n    }\r\n    const updateCounter = ()=>{\r\n      setCounter(n=>n+1);\r\n    }\r\n    const updateFails = ()=>{\r\n      setFails(f=>f+1);\r\n    }\r\n    const startGame = ()=>{\r\n      setGame(()=>true);\r\n    }\r\n\r\n    const updateStatus = (msg)=>{\r\n      setStatusContent(msg);\r\n    }\r\n\r\n    useEffect(()=>{\r\n      if(canReload.current === true){\r\n        setShuffleArray(shuffle(cards));\r\n        setReloadGame(false);\r\n        canReload.current = false;\r\n        setCounter(0);\r\n        setSeconds(time);\r\n        setFails(0);\r\n        updateStatus(<span onClick={()=>{startGame()}} style={{cursor: 'pointer'}}>Play</span>);\r\n        document.getElementById('reloadbutton').style.display = 'none';\r\n      }\r\n    }, [reloadGame])\r\n\r\n    useEffect(()=>{\r\n    \r\n      document.addEventListener('timeover', event => {\r\n        if(counter !== nPairs){\r\n          updateStatus(\"Game Over\");\r\n          document.getElementsByClassName('board')[0].style.opacity = 0.2;\r\n          document.getElementById('reloadbutton').style.display = 'block';\r\n        }else if(counter === nPairs){\r\n          updateStatus(\"Congratulations!\");\r\n          document.getElementsByClassName('board')[0].style.opacity = 0.2;\r\n          document.getElementById('reloadbutton').style.display = 'block';\r\n        }\r\n        for(let i=0;i<(nPairs*2);i++){\r\n          document.querySelector(\"div[data-card='\"+i+\"']\").className = \"card\";\r\n        }\r\n        setGame(false);\r\n        setSeconds(0);\r\n        canReload.current = true;\r\n      })\r\n      if(seconds === 0 && game === true){\r\n        pair.splice(0,2);\r\n        document.dispatchEvent(timeOver); /* cool! */\r\n      }\r\n    }, [timeOver, seconds, counter, game])\r\n\r\n    useEffect(()=>{\r\n      if(game === true){\r\n        setStatusContent(\"\");\r\n        document.getElementsByClassName('board')[0].style.opacity = 1;\r\n      }\r\n      \r\n      var timeinterval = setInterval(()=>{ \r\n        if(game === true){\r\n          setSeconds(s=>s-1);\r\n        }\r\n      }, 1000);  \r\n      \r\n      document.addEventListener('timeover', event => {   \r\n        clearInterval(timeinterval);\r\n      })\r\n\r\n    }, [game]);\r\n    \r\n    return(\r\n    <Container>\r\n      <div className='boardinfo'>\r\n      <Row>\r\n        <Col><div className='info'> <FontAwesomeIcon icon={faClock} /> {seconds}s <div onClick={()=>{setReloadGame(true)}} className='info' id='reloadbutton' style={{float: 'right', cursor:'pointer'}}><FontAwesomeIcon icon={faRedo} /></div></div></Col>\r\n        <Col><div className='buttondiv' style={{textAlign:'center'}}><GameStatus startGame={startGame} message={statusContent} game={game} /></div></Col>\r\n        <Col><div className='info' style={{float:'right'}}><FontAwesomeIcon icon={faCheck} /> {counter}   <FontAwesomeIcon icon={faTimes} /> {fails}</div></Col>\r\n      </Row>\r\n      </div>\r\n      <div className='board'>\r\n        <GameBoard onTimeUpdate={onTimeUpdate} onFailsUpdate={updateFails} onCounterUpdate={updateCounter} counter={counter} canFlip={game} rows={rows} cols={cols} pairs={nPairs} shuffleArray={shuffleArray} />\r\n      </div>\r\n      \r\n    </Container>\r\n    );\r\n};\r\n\r\nexport { HomePage };","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { HomePage } from './Pages';\n\nfunction App() {\n  return (\n    \n    <BrowserRouter basename='/cardmemorygame'>\n        <h1>a</h1>\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n        </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}